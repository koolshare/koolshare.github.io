#!/bin/sh
eval `dbus export shadowsocks`
eval `dbus export ss`
chnroute="/koolshare/ss/redchn/chnroute.txt"
black=$(echo $ss_basic_black_lan | sed "s/,/ /g")
white=$(echo $ss_basic_white_lan | sed "s/,/ /g")
lan_ipaddr=$(nvram get lan_ipaddr)
SHADOWSOCKS_chian_exist=`iptables -t nat -L -n -v | grep SHADOWSOCKS`
SHADOWSOCKS2_chian_exist=`iptables -t mangle -L -n -v | grep SHADOWSOCKS`
ip_rule_exist=`ip rule show | grep "fwmark 0x1/0x1 lookup 300" | grep -c 300`
server_ip=`resolvip $ss_basic_server`
ip1=$(nvram get wan0_ipaddr | cut -d"." -f1)
ip2=$(nvram get wan0_ipaddr | cut -d"." -f2)
MODULES="nf_tproxy_core xt_TPROXY xt_socket xt_comment"
OS=$(uname -r)

# Different routers got different iptables syntax
case $(uname -m) in
  armv7l)
    MATCH_SET='--match-set'
    ;;
  mips)
    MATCH_SET='--set'
    ;;
esac

if [ -z "$shadowsocks_server_ip" ];then
        if [ ! -z "$server_ip" ];then
                export shadowsocks_server_ip="$server_ip"
                ss_basic_server="$server_ip"
                dbus save shadowsocks
        fi
else
        if [ "$shadowsocks_server_ip"x = "$server_ip"x ];then
                ss_basic_server="$shadowsocks_server_ip"
        elif [ "$shadowsocks_server_ip"x != "$server_ip"x ] && [ ! -z "$server_ip" ];then
                ss_basic_server="$server_ip"
                export shadowsocks_server_ip="$server_ip"
                dbus save shadowsocks
        else
                ss_basic_server="$ss_basic_server"
        fi
fi

# load Kernel Modules
echo $(date): load TPROXY modules...
checkmoduleisloaded(){
	if lsmod | grep $MODULE &> /dev/null; then return 0; else return 1; fi;
}


for MODULE in $MODULES; do
	if ! checkmoduleisloaded; then
		insmod /lib/modules/${OS}/kernel/net/netfilter/${MODULE}.ko
	fi
done

modules_loaded=0

for MODULE in $MODULES; do
	if checkmoduleisloaded; then
		modules_loaded=$(( i++ )); 
	fi
done

if [ $modules_loaded -ne 3 ]; then
	echo "One or more modules are missing, only $(( modules_loaded+1 )) are loaded. Can't start.";
	exit 1;
fi
echo $(date): done
echo $(date): 
# flush iptables if already exist

#if [ ! -z "$SHADOWSOCKS_chian_exist" ] || [ ! -z "$SHADOWSOCKS2_chian_exist" ];then
	iptables -t nat -D OUTPUT -p tcp -m set $MATCH_SET router dst -j REDIRECT --to-ports 3333 >/dev/null 2>&1
	iptables -t nat -D PREROUTING -p tcp -j SHADOWSOCKS >/dev/null 2>&1
	iptables -t nat -F SHADOWSOCKS >/dev/null 2>&1
	iptables -t nat -X SHADOWSOCKS >/dev/null 2>&1
	iptables -t nat -D PREROUTING -s $lan_ipaddr/24 -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
	iptables -t mangle -D PREROUTING -p udp -j SHADOWSOCKS2 >/dev/null 2>&1
	iptables -t mangle -F SHADOWSOCKS2 >/dev/null 2>&1
	iptables -t mangle -X SHADOWSOCKS2 >/dev/null 2>&1
#fi


if [ ! -z "ip_rule_exist" ];then
	until [ "$ip_rule_exist" = 0 ]
	do 
		ip rule del fwmark 0x01/0x01 table 300
		ip_rule_exist=`expr $ip_rule_exist - 1`
	done
fi

	ip route del local 0.0.0.0/0 dev lo table 300 >/dev/null 2>&1


ipset -F router >/dev/null 2>&1
ipset -X router >/dev/null 2>&1

# load chnroute to ipset
ipset -N router iphash
sed -e "s/^/-A chnroute &/g" -e "1 i\-N chnroute nethash --hashsize 80000" $chnroute | awk '{print $0} END{print "COMMIT"}' | ipset -R

# create nat chain
iptables -t nat -N SHADOWSOCKS

# not redirect these
iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN
iptables -t nat -A SHADOWSOCKS -d $ip1.$ip2.0.0/16 -j RETURN
iptables -t nat -A SHADOWSOCKS -d $ss_basic_server -j RETURN

# create ip rules
ip rule add fwmark 0x01/0x01 table 300
ip route add local 0.0.0.0/0 dev lo table 300

# creat mangle chain
iptables -t mangle -N SHADOWSOCKS2

# return these ip
iptables -t mangle -A SHADOWSOCKS2 -d 0.0.0.0/8 -j RETURN
iptables -t mangle -A SHADOWSOCKS2 -d 10.0.0.0/8 -j RETURN
iptables -t mangle -A SHADOWSOCKS2 -d 127.0.0.0/8 -j RETURN
iptables -t mangle -A SHADOWSOCKS2 -d 169.254.0.0/16 -j RETURN
iptables -t mangle -A SHADOWSOCKS2 -d 172.16.0.0/12 -j RETURN
iptables -t mangle -A SHADOWSOCKS2 -d 192.168.0.0/16 -j RETURN
iptables -t mangle -A SHADOWSOCKS2 -d 224.0.0.0/4 -j RETURN
iptables -t mangle -A SHADOWSOCKS2 -d 240.0.0.0/4 -j RETURN
iptables -t mangle -A SHADOWSOCKS2 -d $ip1.$ip2.0.0/16 -j RETURN
iptables -t mangle -A SHADOWSOCKS2 -d $ss_basic_server -j RETURN


# Apply the rules
iptables -t nat -A PREROUTING -p tcp -j SHADOWSOCKS
iptables -t mangle -A PREROUTING -p udp -j SHADOWSOCKS2

# router itself
iptables -t nat -A OUTPUT -p tcp -m set $MATCH_SET router dst -j REDIRECT --to-ports 3333

# lan control
if [ "$ss_basic_lan_control" == "1" ];then
	if [ ! -z $ss_basic_black_lan ];then
		for balck_ip in $black
		do
			iptables -t nat -A SHADOWSOCKS -p tcp -s $balck_ip -j RETURN
			iptables -t mangle -A SHADOWSOCKS2 -p udp -s $balck_ip -j RETURN
		done
		iptables -t nat -A SHADOWSOCKS -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 3333
		iptables -t mangle -A SHADOWSOCKS2 -p udp -m set ! $MATCH_SET chnroute dst -j TPROXY --on-port 3333 --tproxy-mark 0x01/0x01
	else
	iptables -t nat -A SHADOWSOCKS -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 3333
	iptables -t mangle -A SHADOWSOCKS2 -p udp -m set ! $MATCH_SET chnroute dst -j TPROXY --on-port 3333 --tproxy-mark 0x01/0x01
	fi
elif [ "$ss_basic_lan_control" == "2" ];then
	if [ ! -z $ss_basic_white_lan ];then
		for white_ip in $white
		do
			iptables -t nat -A SHADOWSOCKS -p tcp -s $white_ip -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 3333
			iptables -t mangle -A SHADOWSOCKS2 -p udp -s $white_ip -m set ! $MATCH_SET chnroute dst -j TPROXY --on-port 3333 --tproxy-mark 0x01/0x01
		done
	else
	iptables -t nat -A SHADOWSOCKS -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 3333
	iptables -t mangle -A SHADOWSOCKS2 -p udp -m set ! $MATCH_SET chnroute dst -j TPROXY --on-port 3333 --tproxy-mark 0x01/0x01
	fi
else 
	iptables -t nat -A SHADOWSOCKS -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 3333
	iptables -t mangle -A SHADOWSOCKS2 -p udp -m set ! $MATCH_SET chnroute dst -j TPROXY --on-port 3333 --tproxy-mark 0x01/0x01
fi

if [ "$ss_basic_chromecast" == "1" ]; then
	echo $(date): enable lan dns take over, i.e chromecast...
	iptables -t nat -A PREROUTING -s $lan_ipaddr/24 -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
	echo $(date): done
	echo $(date):
else
	echo $(date): disable lan dns take over..
	iptables -t nat -D PREROUTING -s $lan_ipaddr/24 -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
	echo $(date): done
	echo $(date):
fi

